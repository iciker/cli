name: CLI Release
on:
  push:
    tags:
      - 'cli-beta.v*'  # Changed to CLI-specific tag pattern

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Beta Release ${{ github.ref }}
          draft: false
          prerelease: true  # Mark as prerelease

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: smithery-linux
            asset_path: ./dist/bin/smithery-linux
          - os: windows-latest
            asset_name: smithery-windows.exe
            asset_path: ./dist/bin/smithery-win.exe
          - os: macos-latest
            asset_name: smithery-darwin
            asset_path: ./dist/bin/smithery-darwin
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build (non-Windows)
        if: matrix.os != 'windows-latest'
        run: npm run build
        
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Compile TypeScript first
          npx tsc
          
          # Create a Windows-compatible build script
          $buildScript = @"
          import * as esbuild from 'esbuild';
          import { readFileSync } from 'fs';
          import path from 'path';
          
          async function build() {
              try {
                  const pkg = JSON.parse(readFileSync('./package.json', 'utf8'));
                  
                  // Bundle the application
                  await esbuild.build({
                      entryPoints: ['./dist/index.js'],
                      bundle: true,
                      platform: 'node',
                      target: 'node20',
                      outfile: './dist/index.js',
                      banner: {
                          js: '#!/usr/bin/env node',
                      },
                      external: Object.keys(pkg.dependencies || {}).concat(Object.keys(pkg.peerDependencies || {})),
                  });
          
                  console.log('Build completed successfully');
              } catch (error) {
                  console.error('Build failed:', error);
                  process.exit(1);
              }
          }
          
          build();
          "@
          
          # Write the modified build script to a file
          $buildScript | Out-File -FilePath "windows-build.mjs" -Encoding utf8
          
          # Run the modified build script
          node windows-build.mjs
        
      - name: Package binaries
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run package:clean && npm run package:config && npm run package:blob && npm run package:win
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            npm run package:clean && npm run package:config && npm run package:blob && npm run package:linux
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            npm run package:clean && npm run package:config && npm run package:blob && npm run package:mac
          fi
        shell: bash
        
      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream 